public class UpdatePromoCodeTriggerHandler {
    public static void updatePromoCode(List<Opportunity> OppList, Map<Id, Opportunity> oldOppMap) {
        for (Opportunity opp : OppList) {     
            if (opp.Shopify_Meta_Fields__c != null && opp.Shopify_Meta_Fields__c != '' &&
                (!Trigger.isUpdate  || ( oldOppMap.get(opp.Id).Shopify_Meta_Fields__c != null && oldOppMap.get(opp.Id).Shopify_Meta_Fields__c != '' && opp.Shopify_Meta_Fields__c != oldOppMap.get(opp.Id).Shopify_Meta_Fields__c))) {
                    String metadapromotaString = opp.Shopify_Meta_Fields__c;
                    
                    try {
                        List<Object> metadataList = (List<Object>) JSON.deserializeUntyped(metadapromotaString);
                        
                        for (Object metadata : metadataList) {
                            if (metadata instanceof Map<String, Object>) {
                                Map<String, Object> rootMap = (Map<String, Object>) metadata;
                                
                                if (rootMap.containsKey('properties') && rootMap.get('properties') instanceof List<Object>) {
                                    List<Object> propertiesList = (List<Object>) rootMap.get('properties');
                                    
                                    Map<String, String> propertyMap = new Map<String, String>();
                                    for (Object property : propertiesList) {
                                        if (property instanceof Map<String, Object>) {
                                            Map<String, Object> propMap = (Map<String, Object>) property;
                                            
                                            if (propMap.containsKey('name') && propMap.containsKey('value') &&
                                                propMap.get('name') instanceof String && propMap.get('value') instanceof String) {
                                                    propertyMap.put(String.valueOf(propMap.get('name')), String.valueOf(propMap.get('value')));
                                                }
                                        }
                                    }
                                    
                                    String discountName = propertyMap.get('_discount_name');
                                    if (String.isNotBlank(discountName)) {
                                        opp.Promo_Code__c =discountName;
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                        System.debug('Error parsing JSON: ' + e.getMessage());
                    }
                }
            if (opp.HIC_ShopifySync__Total_Price__c != null &&
                (!Trigger.isUpdate || (oldOppMap != null && oldOppMap.containsKey(opp.Id) &&  oldOppMap.get(opp.Id).HIC_ShopifySync__Total_Price__c != null &&  opp.HIC_ShopifySync__Total_Price__c != oldOppMap.get(opp.Id).HIC_ShopifySync__Total_Price__c))) {
                    opp.Total_Price__c = opp.HIC_ShopifySync__Total_Price__c;
                } 
        }
        
    }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
public class UpdateShipMethodOnOrderHandler {
    public static void updateShipMethod(List<Order> OrderList, Map<Id, Order> oldOrderMap){
        for (Order ord : OrderList) {
            if (ord.Shopify_Meta_Fields__c !=null && ord.Shopify_Meta_Fields__c != '' &&  (Trigger.isInsert || (oldOrderMap.get(ord.Id).Shopify_Meta_Fields__c!=null && oldOrderMap.get(ord.Id).Shopify_Meta_Fields__c!=''  &&  ord.Shopify_Meta_Fields__c != oldOrderMap.get(ord.Id).Shopify_Meta_Fields__c))) {
                String metadataString = ord.Shopify_Meta_Fields__c;
                try {
                    List<Object> metadataList = (List<Object>) JSON.deserializeUntyped(metadataString);
                    if (!metadataList.isEmpty() && metadataList[0] instanceof Map<String, Object>) {
                        Map<String, Object> rootMap = (Map<String, Object>) metadataList[0];
                        if (rootMap.containsKey('title')) {
                            String shipMethodValue = String.valueOf(rootMap.get('title'));
                            System.debug('title value: ' + shipMethodValue);
                            
                            if (String.isNotBlank(shipMethodValue)) {
                                ord.Ship_Method__c = 'Advanced Shipping Rules, ' + shipMethodValue;
                            } else {
                                System.debug('Title is blank in the JSON.');
                            }
                        } else {
                            System.debug('Title key not found in the JSON.');
                        }
                    } else {
                        System.debug('Invalid JSON format or empty array.');
                    }
                } catch (Exception e) {
                    System.debug('Error parsing JSON: ' + e.getMessage());
                }
            }
            if(ord.Shopify_Order_Fulfillment_Status__c !=null  && ord.Shopify_Order_Fulfillment_Status__c !='' && (Trigger.isInsert || ( ord.Shopify_Order_Fulfillment_Status__c != oldOrderMap.get(ord.Id).Shopify_Order_Fulfillment_Status__c))){
                if(ord.Shopify_Order_Fulfillment_Status__c =='fulfilled'){
                    ord.Shopify_Fulfillment_Status__c='Fulfilled';
                }
                else {
                    ord.Shopify_Fulfillment_Status__c='Unfulfilled';
                }
                
            }
            
        }
    }
    
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
@isTest
public class UpdatePromoShipLeadConversionTest {
    @isTest
    static void testMetadataParsing() {
        Opportunity opp = new Opportunity(
            Name = 'Test Opportunity',
            StageName = 'Closed Won',
            CloseDate = Date.today(),
            HIC_ShopifySync__Total_Price__c = 1000.00,
            Shopify_Meta_Fields__c = '[{"properties":[{"name":"_discount_name","value":"0%_off_for_25_patches#25%_off_for_50_patches#35%_off_for_100_patches#55%_off_for_200_patches#65%_off_for_500_patches#70%_off_for_1000_patches"}]}]'
        );
        insert opp;
        Test.startTest();
        List<Opportunity> oppList = [SELECT Id, Promo_Code__c, Shopify_Meta_Fields__c FROM Opportunity WHERE Id = :opp.Id];
        Test.stopTest();
        Opportunity resultOpp = [SELECT Id, Promo_Code__c FROM Opportunity WHERE Id = :opp.Id];
    }
    @isTest
    static void testLeadConversionAccNConMethod(){
        List<Lead>LeadtList= new List<Lead>();
        List<Account>AccountList= new List<Account>();
        List<Contact>contactList= new List<Contact>();
        Map<Id, Contact> ContactMap = new Map<id, contact>();
        
        Lead ld= new Lead();
        ld.LastName='Test';
        ld.Company='TestComapany';
        ld.Status='Open - Not Contacted';
        ld.Email='Test@gmail.com';
        LeadtList.add(ld);
        insert LeadtList;
        
        Account Acc= new Account();
        Acc.Name='TestComapany';
        AccountList.add(Acc);
        
        insert AccountList;
        
        Contact con= new Contact();
        con.FirstName='Test';
        con.LastName='Test';
        con.AccountId=AccountList[0].id;
        con.Email='Test@gmail.com';
        ContactMap.put(con.id, con);
        contactList.add(con);        
        Test.startTest();
        LeadConvertHandler.contactInsert(contactList);
        Test.stopTest();   
    }
}
