public class ObjectOwnerDistribution {
    public static void handleNewRecords(List<SObject> newRecords, String groupDeveloperName) {
        String sObjectType = String.valueOf(newRecords[0].getSObjectType());
        /*Map<Id, Integer> userCountMap = new Map<Id, Integer>(); // Assume you have this map populated with user Ids
    
        String query = 'SELECT OwnerId, COUNT(Id) countField FROM ' + sObjectType +
            ' WHERE OwnerId IN :userCountMap.keySet() GROUP BY OwnerId';
        
        List<AggregateResult> aggregateResults = Database.query(query);
        
        for (AggregateResult result : aggregateResults) {
            Id ownerId = (Id)result.get('OwnerId');
            Integer countField = (Integer)result.get('countField');
            // Handle the results as needed, such as updating a map or list
        }*/
        
        Map<Id, Integer> userCountMap = new Map<Id, Integer>();
        Set<Id> userIds = new Set<Id>();
        
        for (GroupMember member : [SELECT UserOrGroupId FROM GroupMember WHERE GroupId IN (SELECT Id FROM Group WHERE DeveloperName = 'TestingGroup')]) {
            userIds.add((Id) member.UserOrGroupId);
        }
        
        for (Id userId : userIds) {
            userCountMap.put(userId, 0);
        }
        
        String countField = '';
        String objectName = '';
        
        if (sObjectType == 'Account') {
            countField = 'accountCount';
            objectName = 'Account';
        } else if (sObjectType == 'Opportunity') {
            countField = 'opportunityCount';
            objectName = 'Opportunity';
        } else if (sObjectType == 'Order') {
            countField = 'orderCount';
            objectName = 'Order';
        }
        
        /*for (AggregateResult aggregate : [SELECT OwnerId, COUNT(Id) countField FROM sObjectType WHERE OwnerId IN : userCountMap.keySet() GROUP BY OwnerId]) {
            Id userId = (Id) aggregate.get('OwnerId');
            Integer recordCount = (Integer) aggregate.get(countField);
            userCountMap.put(userId, recordCount);
        }*/
         String query ='SELECT OwnerId, COUNT(Id) countField FROM ' + sObjectType +' WHERE OwnerId IN : userCountMap.keySet() GROUP BY OwnerId';
        List<AggregateResult> aggregateResults = Database.query(query);
        for (AggregateResult aggregate : aggregateResults) {
            Id userId = (Id) aggregate.get('OwnerId');
            Integer recordCount = (Integer) aggregate.get(countField);
            userCountMap.put(userId, recordCount);
        }

        
        for (SObject newRecord : newRecords) {
            Id selectedUserIdToAssign = null;
            Integer minRecordCount = 2147483647;
            List<Id> usersWithMinCount = new List<Id>();
            
            for (Id userId : userCountMap.keySet()) {
                Integer recordCount = userCountMap.get(userId);
                
                if (recordCount < minRecordCount) {
                    minRecordCount = recordCount;
                    usersWithMinCount.clear();
                    usersWithMinCount.add(userId);
                } else if (recordCount == minRecordCount) {
                    usersWithMinCount.add(userId);
                }
            }
            
            if (!usersWithMinCount.isEmpty()) {
                Integer randomIndex = Math.mod(Math.abs(Crypto.getRandomInteger()), usersWithMinCount.size());
                selectedUserIdToAssign = usersWithMinCount[randomIndex];
            }
            
            userCountMap.put(selectedUserIdToAssign, minRecordCount + 1);  
            newRecord.put('OwnerId', selectedUserIdToAssign);
        }
    }
}
